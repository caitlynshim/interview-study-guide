# Detailed Architecture and Data Flow

## 1. System Architecture Diagram (Detailed)

```
┌─────────────────────────────┐
│        User Browser         │
│  (React/Next.js Frontend)   │
└─────────────┬───────────────┘
              │  HTTP (REST, JSON)
              ▼
┌─────────────────────────────┐
│   Next.js API Routes        │
│   (Node.js 18, Express-like)│
│   - /api/experiences/add    │
│   - /api/experiences/edit   │
│   - /api/experiences/delete │
│   - /api/experiences/list   │
│   - /api/experiences/generate │
│   - /api/questions/random   │
│   - /api/questions/categories │
└─────────────┬───────────────┘
              │
              ▼
┌─────────────────────────────┐
│      Mongoose ODM           │
│  (Schema, Validation, Model)│
└─────────────┬───────────────┘
              │
              ▼
┌─────────────────────────────┐
│   MongoDB Atlas (Cloud)     │
│   ─ experiences (Collection)│
│     - title: String         │
│     - content: String       │
│     - embedding: [Number;1536] │
│     - metadata:             │
│         - tags: [String]    │
│         - date: Date        │
│         - category: String  │
│         - role: String      │
│     - createdAt: Date       │
│     - updatedAt: Date       │
│   ─ questions (Collection)  │
│     - question: String      │
│     - category: String      │
│     - difficulty: String    │
│     - createdAt: Date       │
│                             │
│   Indexes:                  │
│    - Vector: embedding (knnVector, 1536, cosine, name: vector_search) │
│    - Text: content, title   │
│    - Compound: metadata.category+title, createdAt │
│    - questions: question (text), category, difficulty │
└─────────────┬───────────────┘
              │
              │
              │
              ▼
┌─────────────────────────────┐
│      OpenAI API             │
│   - Embedding endpoint      │
│   - Chat/Completion endpoint│
└─────────────────────────────┘
```

---

## 2. Data Flow (RAG Pipeline)

1. **User Action:**  
   - User selects or enters a question in the UI.
   - Clicks "Generate Answer".

2. **API Call:**  
   - Frontend calls `/api/experiences/generate` with the question.

3. **Embedding Generation:**  
   - API route uses OpenAI to embed the question (`generateEmbedding`).

4. **Vector Search:**  
   - MongoDB Atlas `$vectorSearch` aggregation on `experiences.embedding` using the `vector_search` index.
   - Top 3 most relevant experiences are selected.

5. **Context Construction:**  
   - API builds a context string from the top experiences (with titles, content).

6. **Answer Generation:**  
   - API calls OpenAI with a prompt including the question and context.
   - OpenAI returns a markdown-formatted answer, citing context snippets.

7. **References:**  
   - API appends a references section, listing the context snippets used.

8. **Response:**  
   - API returns the answer and context to the frontend.
   - UI displays the answer, with references.

---

## 3. MongoDB Atlas: Indexes and Collection Details

### **experiences Collection**
- **Fields:**
  - `title` (String, required)
  - `content` (String, required)
  - `embedding` (Array[1536], required, OpenAI format)
  - `metadata` (Object)
    - `tags` (Array[String])
    - `date` (Date)
    - `category` (String, auto-generated by OpenAI)
    - `role` (String)
  - `createdAt` (Date, default: now)
  - `updatedAt` (Date, default: now)

- **Indexes:**
  - **Vector Search Index**  
    ```json
    {
      "mappings": {
        "dynamic": false,
        "fields": {
          "embedding": {
            "type": "knnVector",
            "dimensions": 1536,
            "similarity": "cosine"
          }
        }
      }
    }
    ```
    - **Name:** `vector_search`
    - **Purpose:** Fast semantic search for RAG.

  - **Text Index:**  
    - On `content` and `title` for keyword fallback.

  - **Compound Indexes:**  
    - `{ "metadata.category": 1, "title": 1 }` (for filtering and sorting)
    - `{ "createdAt": -1 }` (for recency)

### **questions Collection**
- **Fields:**
  - `question` (String, required)
  - `category` (String, required)
  - `difficulty` (String: 'easy' | 'medium' | 'hard')
  - `createdAt` (Date, auto-generated)

- **Indexes:**
  - Text index on `question`
  - Index on `category`
  - Index on `difficulty`

---

## 4. API Endpoints (with Data Flow)

- **/api/experiences/add**  
  - Validates input, generates embedding, assigns category (OpenAI), saves to DB.

- **/api/experiences/edit**  
  - Updates experience, re-embeds, re-categorizes.

- **/api/experiences/delete**  
  - Removes experience by ID.

- **/api/experiences/list**  
  - Lists experiences, supports filtering by `metadata.category`.

- **/api/experiences/generate**  
  - Receives question, embeds, vector search, context build, answer generation, returns answer + references.

- **/api/questions/random**  
  - Returns a random question, optionally filtered by category.

- **/api/questions/categories**  
  - Returns all unique categories.

---

## 5. Scripts

- **migrate-categories.js**  
  - Assigns categories to all experiences using OpenAI, supports dry-run and write modes.

- **import-questions.js**  
  - Imports questions into the database.

---

## 6. Error Handling & Logging

- All API endpoints return detailed error messages.
- Vector search errors (e.g., missing index) are logged and fallback to random docs.
- Server logs include stack traces for debugging.

---

## 7. DevOps & Backup

- **Backups:**  
  - Before every major change, the project is backed up to a timestamped `.backup/` directory (ignored by git).

- **Git:**  
  - All major changes are committed and pushed to GitHub.

- **Server:**  
  - Always run in the background on port 3002.

---

## 8. Environment Variables

- `.env.local` (not checked in):
  ```
  MONGODB_URI=your_mongodb_atlas_uri
  OPENAI_API_KEY=your_openai_key
  ```

---

## 9. UI/UX

- Modern, responsive design (olive/spring palette).
- Navigation bar: "Answer a question", "Add an experience", "Navigate experiences".
- Category filtering, context-rich answer display, detailed error messages.

---

## 10. Visual Summary

**Data Flow:**
```
User → Next.js UI → API Route → [OpenAI (embedding)] → MongoDB (vector search) → [OpenAI (answer)] → API Route → UI
```

**MongoDB Atlas:**
- `experiences` (vector, text, compound indexes)
- `questions` (text, category, difficulty indexes)

---

If you want a **visual diagram file** (e.g., PNG, SVG, or a draw.io/mermaid code block), let me know your preferred format and I'll generate it for you! 